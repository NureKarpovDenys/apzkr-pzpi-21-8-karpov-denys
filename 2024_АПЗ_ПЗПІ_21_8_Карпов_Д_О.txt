Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА 
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система  для управління та відстежування контейнерів

Студент гр. ПЗПІ-21-8     __________________ Карпов Д.О.
      (підпис)Керівник роботи     __________________ ст.викл. Сокорчук І.П.
       (підпис)          Роботу захищено «__»_________2024 р.
     з оцінкою _________________________Комісія:     __________________  доц. Лещинський В.О.
      (підпис)
   __________________ доц. Лещинська І.О.
      (підпис)
     __________________ ст.викл. Сокорчук І.П.
      (підпис)     


Харків 
2024 р.
Харківський національний університет радіоелектроніки
    
     Факультет комп’ютерних наук         Кафедра програмної інженерії	      
     Спеціальність 121 – Інженерія програмного забезпечення	
     Курс           3		 Семестр  			            6			
     Навчальна дисципліна Архітектура програмного забезпечення	
    
    ЗАВДАННЯ
    НА КУРСОВУ РОБОТУ СТУДЕНТОВІ
    Карпову Денису Олександровичу
1. Тема роботи: «Програмна система  для управління та відстежування контейнерів»	
2. Термін узгодження завдання курсової роботи «31» березня 2024 р.
3. Термін здачі студентом закінченої роботи «10» червня 2024 р.
4. Вихідні дані до проекту (роботи): В програмній системі передбачити:
унікальність, актуальність, розповсюдженість, масштабованість, локалізація, конфіденційність, адміністрування системи, реалізація трьох компонентів, безпека даних (Back-end, Front-end, IoT)
5. Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проєктування бази даних, архітектура програмної системи, опис програмної системи, висновки, перелік посилань, додатки	
6. Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) ER-модель бази даних, Діаграма логічної моделі бази даних, Діаграма прецедентів користувачів системи, Діаграма розгортання,  UML діаграма пакетів серверної частини, Діаграма прецедентів IoT модулю системи, Діаграма пакетів IoT-модулю системи, Діаграма взаємодії IoT-модулю системи, Діаграма діяльності IoT-модулю системи, Діаграма прецедентів клієнтської частини системи, Діаграма пакетів клієнтської частини системи, Діаграма компонентів клієнтської частини системи.	
     
     КАЛЕНДАРНИЙ ПЛАН
     
     
НомерНазва етапів курсової роботиСтрок виконання етапів роботиПримітки1Функціональна специфікація програмного проєкту    31.03.24     2Проєктування програмного проєкту    30.04.24     3Кодування програмного проєкту    24.05.24     4Оформлення пояснювальної записки    06.06.24     5Захист курсової роботи    08.06.24         
    Дата видачі завдання «24» березня 2024 р.
     Керівник__________________ ст.викл. Сокорчук І.П.
(підпис)    
    Завдання прийняв до виконання
     ст. гр. ПЗПІ-21-8     __________________      Карпов Д.О
      (підпис)     

	РЕФЕРАТ	


     Пояснювальна записка до курсової роботи:
     ЗАСТОСУНОК, КЛІЄНТ, КОМПАНІЯ, КОНТЕЙНЕР, КОРИСТУВАЧ, МОРЕ, ПОРТ, ПРОГРАМНА СИСТЕМА, УПРАВЛІННЯ.
     
     Завданням на курсову роботу є створення масштабованої програмної системи. Як тему для проєкту було обрано створення програмної системи для управління та відстежування контейнерів.
     У функціонал системи входить такі можливості як відстеження контейнерів за їх номером, відстеження температурних показників в контейнерах, а також управління контейнерами.
     Для розробки програмної системи будуть використані такі технології як TypeScript, React для розробки серверної частини, самою базою даних буде виступати PostgreSQL, яка буде підтримуватися через платформу Supabase, також буде використано мову програмування С++ для для імітації роботи пристрою речей розумного інтернету.


ЗМІСТ


      ВСТУП	7
      1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ	8
     1.1 Бізнес-вимоги	8
     1.1.1 Бізнес-можливості	8
     1.1.2 Бізнес-цілі та критерії успіху	9
     1.1.3 Потреби клієнтів або ринку	11
     1.2 Концепція рішення	12
     1.2.1 Окреслення концепції	12
     1.2.2 Головна функціональність	13
     1.2.3 Припущення та залежності	14
     1.3 Рамки та обмеження проекту	15
     1.3.1 Рамки первинного випуску	15
     1.3.2 Рамки наступних випусків	15
     1.3.3 Обмеження та винятки	16
     1.4 Бізнес-контекст	16
     1.4.1 Профілі зацікавлених сторін	16
     1.4.2 Пріоритети проекту	18
     1.4.3 Робоче середовище	19
      2 ПОСТАНОВКА ЗАДАЧІ	20
      3 ПРОЄКТУВАННЯ БАЗИ ДАНИХ	22
      4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ	24
     4.1 Архітектура серверної частини	24
     4.2 Архітектура ІоТ частини	26
     4.3 Архітектура клієнтської частини	29
      5 ОПИС ПРОГРАМНОЇ СИСТЕМИ	33
     5.1 Виклик і завантаження	33
     5.2 Призначення і логічна структура	33
     5.3 Опис програмної реалізації	34
      ВИСНОВКИ	40
      ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ	41
      ДОДАТОК Б	48
      ДОДАТОК В	56
     


ВСТУП

     У сучасному світі, більше 80% міжнародних відправлень відбуваються за допомогою моря і більш ніж 60% з них відбувається за допомогою контейнерів, тобто ця галузь є дуже важливою для міжнародного ринку, саме тому виникає необхідність для створення програмної системи для управління контейнерами та відстеження них[1]. Головною метою цієї системи є полегшення процесів для управлінців та забезпечення замовників зручним інструментом для відстеження необхідної інформації.
     У цьому контексті, наша програмна система для управління та відстеження контейнерів виступає як необхідна передумова для забезпечення оптимальних умов управління та задоволення усіх потреб замовників. Система має забезпечувати ефективний моніторинг та контроль усіх етапів перевезення контейнерів, гарантуючи відповідність всіх деталей вимогам та стандартам.
     Крім того, враховуючи різноманітність та унікальність кожного перевезення, наша програмна система забезпечує точне відстеження та виконання всіх вимог щодо обробки та доставки контейнерів. Такий підхід допоможе надати якомога кращій результат враховуючи особисті потреба клієнтів.
     Нарешті, система управління та відстеження контейнерів дозволяє нам ефективно координувати всі аспекти перевезення, від управління розкладом до вирішення поточних завдань. Це сприяє безперебійному перевезенню та зменшує труднощі для замовників, дозволяючи їм зосередитися на своїх основних завданнях.
     Отже, розробка та впровадження програмної системи для управління та відстеження контейнерів є важливою для багатьох галузей, оскільки ефективне управління контейнерами є критичним для гладкого функціонування логістичних та торговельних операцій. Наша система стане гарантом полегшення та покращення процесів для управлінців та замовників.


1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
     1.1 Бізнес-вимоги
     1.1.1 Бізнес-можливості
     
     
     Аналоги:
     Одним з аналогів є система track-trace: яка допомагає користувачам відстежувати контейнери по всьому світу, і для того щоб відстежити контейнер треба просто ввести номер контейнера та щоб компанія, яка перевозить контейнери була в списку компаній які надають послуги відстеження їх контейнерів. Але ця система існує лише для того щоб їх відстежувати, ніякого функціоналу для управління контейнерами для робітників система не надає.
     Іншим аналогом можна назвати ShipItNow, яка займається управлінням відправок з одного місця в інше, а також надає потрібні матеріали для надсилання відповідних посилок. Але їх система має великий недолік, це те що усі функції можна отримати лише для американських компаній.
     Переваги нашої системи:
     Наша програмна система для управління та відстеження контейнерів відрізняється від аналогів наступними перевагами:
     * Розширений функціонал: Система не лише відстежує контейнери, але й надає інструменти для планування маршрутів.
     * Глобальна доступність: У відміну від деяких конкурентів, наш продукт буде доступний для користувачів у всіх регіонах світу, що забезпечить його конкурентоспроможність на міжнародному ринку.
     * Персоналізація: Наша система дозволяє клієнтам налаштовувати параметри відстеження та управління контейнерами у багатьох точках світу одночасно.
     Модель монетизації та ринкова перспектива:
     Модель монетизації буде базуватися на підписках для логістичних компаній та користувачів, які будуть використовувати систему для керування вантажами. Додаткові можливості та сервіси будуть доступні за додаткову плату, забезпечуючи додатковий дохід для компанії.
     Ринок логістики швидко зростає, особливо в умовах глобалізації та зростаючої потреби у точних та ефективних системах управління. Наша програмна система має значні перспективи розвитку, оскільки вона відповідає потребам сучасного ринку та надає комплексні рішення для логістичних викликів.
     Прибуток:
     Очікується, що система буде приносити прибуток через місячні абонентські внески від логістичних компаній, які використовуватимуть її сервіси. Додатковий дохід може надходити за рахунок надання розширених функціональних можливостей та додаткових сервісів за плату. Враховуючи постійний ріст галузі та попит на наші послуги, очікується стабільний та зростаючий дохід з часом.
     Отже хоч на ринку і існують системи для відстеження та управління контейнерами, але ці системи існують окрема, а наша система для управління та відстежування контейнерів буде об’єднувати у собі усе найкраще з тих система в одній системи, що буде робити нашу систему краще як для звичайних користувачів, так і простішою у використанні для представників компаній.
     
     
     1.1.2 Бізнес-цілі та критерії успіху 
     
     
     БЦ-1: Зниження витрат на обслуговування та покращення доступності[2]:
      * БЦ-1.1: Збільшити ефективність використання ресурсів логістичних компаній шляхом спрощення процесів управління контейнерами та планування доставок.
      * БЦ-1.2: Зменшити час обробки заявок на 10% завдяки впровадженню автоматизованих інструментів.
     БЦ-2: Розширення функціональності для потреб логістичних компаній:
      * БЦ-2.1: Розробити та впровадити нові модулі відстеження контейнерів.
      * БЦ-2.2: Розробити інтуїтивний та оптимізований інтерфейс для полегшення користування системою.
     БЦ-3: Залучити нових клієнтів та розширити ринок:
      * БЦ-3.1: Залучити нових клієнтів з різних країн за допомогою оптимізації та локалізації інтерфейсу.
      * БЦ-3.2: Розширити партнерські зв'язки з постачальниками контейнерів для забезпечення надійних партнерських відносин.
     КУ-1: Підвищення ефективності роботи логістичних компаній:
      * КУ-1.1: Зменшити час, витрачений працівниками на внутрішні організаційні завдання, на 15% через впровадження ефективних інструментів управління даними.
      * КУ-1.2: Забезпечити навчання персоналу логістичних компаній для успішного використання програмного продукту та оптимального використання його можливостей.
     КУ-2: Забезпечення гнучкості та персоналізації обслуговування:
      * КУ-2.1: Розробити механізми для швидкого реагування на зміни в потребах клієнтів та адаптації програмного продукту до їх вимог.
      * КУ-2.2: Забезпечити можливість налаштування системи відповідно до індивідуальних потреб кожної логістичної компанії, забезпечуючи гнучкість у використанні та задоволення усіх вимог клієнтів. 
     КУ-3: Підвищення надійності та функціональності програмного продукту:
      * КУ-3.1: Забезпечити, щоб програмна система працювала стабільно без перебоїв не менше 98% часу протягом року.
      * КУ-3.2: Розробити та впровадити нові функціональні можливості, спрямовані на поліпшення робочих процесів логістичних компаній.
     
     
     1.1.3 Потреби клієнтів або ринку
     
     
     Індивідуалізоване обслуговування клієнтів:
     * Клієнти, що користуються програмною системою для управління та відстежування контейнерів, очікують можливості індивідуалізації обслуговування відповідно до їх унікальних потреб. Це охоплює налаштування системи для відображення специфічних даних та робочих процесів, а також можливість адаптації до конкретних вимог клієнтів.
     Ефективна організація подій:
     * Клієнти потребують програмної системи, що допоможе їм ефективно організовувати та відстежувати події пов'язані з контейнерами. Це включає управління розкладом подій, автоматизацію процесів роботи працівників, та забезпечення своєчасного інформування про події та завдання.
     Легкий доступ та інтуїтивний інтерфейс:
     * Клієнти очікують від програмного продукту зручного та легко зрозумілого інтерфейсу користувача. Це дозволить їм з легкістю користуватися всіма функціями системи та отримувати необхідну інформацію щодо стану та процесів управління контейнерами.
     Безпека та конфіденційність:
     * Клієнти вимагають високого рівня безпеки та конфіденційності щодо їх даних та інформації про контейнери. Гарантування захищеності від несанкціонованого доступу та збереження конфіденційності є ключовими аспектами для успішної реалізації програмного продукту.
     
     
     1.1.4 Бізнес-ризики
     
     
     Технічні проблеми:
     * Існує ризик виникнення несправностей або відмов технічних компонентів, що може призвести до неправильного функціонування програмної системи. Це може вплинути на точність збору та обробки даних про контейнери та може потребувати значних зусиль для виправлення.
     Низька прийнятність ринку:
     * Ризик недостатньої популярності продукту на ринку, який може виникнути через перенасиченість ринку схожими продуктами та не бажанням переходити на новий продукт. Це може суттєво вплинути на швидкість прийняття продукту та доходи компанії.
     Невідповідність вимогам користувачів:
     * Ризик того, що програмний продукт не відповідає повністю вимогам та очікуванням користувачів. Це може призвести до незадоволення користувачів, та  втрати довіри у компанію та її програмний продукт.
     Фінансові ризики:
     * Ризик обмежених фінансових ресурсів для розробки, маркетингу та підтримки продукту. Не достаток фінансів може обмежити можливості компанії у просуванні та розвитку продукту, що вплине на його успішність на ринку.
     
     
     1.2 Концепція рішення
     1.2.1 Окреслення концепції
     
     
     Програмний продукт, розроблений, має на меті забезпечити ефективне управління та відстеженням контейнерів у галузі міжнародних морських відправлень. Основною метою є створення інструменту, який дозволить спростити та оптимізувати процеси портового управління та логістики, забезпечуючи ефективну інвентаризацію, відстеження руху контейнерів, та підвищуючи загальну продуктивність у цій області.
     Програмна система надає можливість користувачам відстежувати розміщення та статус кожного контейнера в реальному часі, а також планувати та координувати їхні переміщення. Окрім того, передбачається автоматизація процесів обліку контейнерів та управління ними, що сприятиме покращенню організації та ефективності роботи.
     Програмний продукт інтегрується з різними системами управління складом та логістики, створюючи єдиний інформаційний простір для координації та оптимізації робочих процесів. Його впровадження допоможе у відстежуванні контейнерів, зменшення втрат та збитків через нестаток комплектації або затримки в доставці, та підвищить загальну ефективність логістичних операцій.
     Загальна мета цього продукту полягає у створенні інноваційного інструменту, який допоможе підприємствам та звичайним людям забезпечити ефективне управління контейнерами та оптимізувати їхні логістичні процеси, а також допоможе звичайним користувачам відстежувати контейнери.

     
     1.2.2 Головна функціональність
     
     
     MF-1: Реєстрація та авторизація компанії або звичайного користувача для доступу до системи. 
     MF-2: Створення та підтримка бази даних контейнерів з можливістю додавання, редагування та видалення інформації. 
     MF-3: Відстеження розміщення та статусу кожного контейнера у реальному часі. 
     MF-4: Моніторинг стану контейнерів та їхнього вмісту для забезпечення ефективного управління запасами та логістичними процесами. 
     MF-5: Можливість звичайному користувачу відстежити будь-який контейнер. 
     MF-6: Налагодження системи сповіщень та повідомлень для оперативного реагування на події та відхилення. 
     MF-7: Забезпечення зручного інтерфейсу для взаємодії з системою та виконання необхідних функцій управління контейнерами.
     
     
     1.2.3 Припущення та залежності
     
     
     Зал. №1: Інформація про контейнери буде надходити в систему від джерел відправлення правильно та вчасно, забезпечуючи актуальні дані для управління та відстеження.
     Зал. №2: Користувачі системи повинні мати доступ до Інтернету та відповідних пристроїв для взаємодії з програмною системою, що забезпечить їхню здатність до ефективного використання системи.
     Зал. №3: Система повинна мати стабільний доступ до електронних баз даних та гарантувати конфіденційність інформації, забезпечуючи надійність та безпеку даних.
     При. №1: Користувачі системи мають забезпечити достовірність та повноту інформації про контейнери та їх розташування, що надається системі, для ефективного управління їхнім розміщенням та статусом.
     При. №2: Система має враховувати різноманітні типи контейнерів та їх специфічні вимоги при розподілі ресурсів та графіку, забезпечуючи оптимальне управління.
     При. №3: Безперервна робота системи передбачає стабільне електроживлення та належне технічне обслуговування обладнання, що буде гарантувати надійність та функціональність системи.

     
     
     
     1.3 Рамки та обмеження проекту
     1.3.1 Рамки первинного випуску
     
     
     У веб-застосунку користувачі будуть мати можливість:
      * реєстрація та авторизація користувача та компанії;
      * переглянути данні про контейнери(тільки для компаній);
      * відстежити контейнер(для компанії та для звичайного користувача);
      * змінення та занесення даних про контейнери(тільки для компаній).
     До функціоналу IoT відноситися вимірювання температури, вологості та інших показників у контейнері.
     У мобільному-застосунку користувачі будуть мати можливість:
      * можливість авторизуватися як користувач;
      * відстеження контейнерів.
     MF-1: Авторизація користувача та компанії
     Користувач або компанія може авторизуватися за допомогою гугл аккаунту.
     MF-2: Переглянути данні про контейнери
     Авторизовані компанії можуть переглянути основну інформацію про контейнер, а також його місце розташування.
     MF-3: Відстежити контейнер
     Авторизований користувач або компанія може відстежити контейнер у реальному часі на мапі світу.
     MF-5: Можливість авторизуватися як користувач
     Користувач може авторизуватися за допомогою гугл аккаунту.
     

     1.3.2 Рамки наступних випусків
     
     
     У веб-застосунку користувачі будуть мати можливість:
      * покращення системи відстеження контейнерів у реальному часі.
     MF-1: Покращення системи відстеження контейнерів у реальному часі.
     За допомогою ІоТ покращити та автоматизувати передачу розташування контейнерів у реальному часі.
     
     
     1.3.3 Обмеження та винятки
     
     
      * Обмеження використання системи на віддалених об'єктах: Система передбачає ефективну роботу в обмежених просторах, таких як контейнерні термінали або складські приміщення. Однак, у випадку великих відстаней між контейнерами або низького сигналу мережі, можливі обмеження у функціональності системи та затримки в обробці даних.
      * Залежність від точності та актуальності даних: Ефективна робота системи передбачає наявність точних та актуальних даних про розміщення контейнерів. В разі відсутності або неточності цих даних, можливість відстеження та керування контейнерами може бути обмежена або недоступна.
     Вплив погодних умов на функціонування системи: Погодні умови, такі як сильний вітер, дощ або туман, можуть впливати на роботу системи через обмеження в зв'язку та затримки в передачі даних між контейнерами та центральною системою управління.

     
     1.4 Бізнес-контекст
     1.4.1 Профілі зацікавлених сторін

     
     
     
     
     Таблиця 1.1 – Профілі зацікавлених сторін проекту
Зацікавлена сторонаГоловна цінністьСтавленняГоловний інтерфейсОбмеженняКерівникЕфективне управління процесами та зростання прибутковостіРозглядають продукт як інструмент оптимізації бізнес-процесівВідображення зведеної звітності, аналітика данихМаксимальний бюджет 300 дол. СШАРедакториМаксимальна точність та зручність у використанніСприймає продукт як інструмент, що дозволяє їм ефективно та швидко працювати з контентомДодавання та редагування контенту, інтеграція з системоюРобота повинна бути можлива на різних типах пристроївПравникиШвидкий доступ до даних та точність поданої інформаціїОчікують забезпечення швидкого та ефективного доступу до необхідної інформації та роботи з неюПошук логістичної інформаціїЗабезпечення швидкого доступу до інформації, можливість взаємодіяти з іншими логістичними системами
     
     
     1.4.2 Пріоритети проекту
     
     
     Таблиця 1.2 – Пріоритети проекту
ПоказникВиконання
(етапи)Обмеження
(граничні значення)Ступінь свободи
(допустимий діапазон)План робітПродукт має бути випущеним приблизно до 07.06.2024Можливе відхилення від графіку на 1-1.5 місяцівФункціональність  90% функціоналу має працювати на релізі 1.0Якість  В 1.0 90-95% повинні пройти тести, у 1.1 повинні пройти тести 95-98%Персонал 2 розробників та 1 тестувальник Ціна ? 300 дол. СШАДопустиме відхилення на 15%
     
     
     1.4.3 Робоче середовище
     
     
     Головним інтерфейсом програмної системи буде веб-застосунок, що підтримує сучасні веб-браузери, такі як Opera, Google Chrome та Microsoft Edge. Розробка веб-застосунка буде здійснюватися на базі фреймворку Next.js версії 14 з використанням TypeScript, React та Tailwind для побудови інтерфейсу.
     Для забезпечення функціональності серверної частини системи буде використано серверний фреймворк Node.js[3] версії 18.17.0. Дані будуть зберігатися у базі даних PostgreSQL версії 16.2, яка буде підтримуватися через платформу Supabase[4] версії 2.42.7.
     Мобільний додаток буде розроблений для платформ iOS та Android з використанням технології React Native. Для розробки мобільного додатку буде використано Android Studio версії 2023.1.1, Java версії 8.361 та JDK версії 20.
     IoT пристрій буде виконувати допоміжну роль і не буде обов'язковим для використання. Розробка IoT пристрою буде здійснюватися на базі платформи ESP-32 з використанням мови програмування C++ версії 23. Для розробки програмної частини пристрою буде використано IDE Wokwi[5].
     


2 ПОСТАНОВКА ЗАДАЧІ
     
     
     За результатами аналізу предметної області, задачею для курсової роботи було визначено створення програмної системи для управління та відстежування контейнерів. Отже наша програмна система повинна задовільнять такі вимоги:
     Основна функціональність програмної системи:
     * Відстеження контейнерів: забезпечення можливості користувачам стежити за місцезнаходженням та статусом кожного контейнера у реальному часі.
     * Планування та координація: планування та координація переміщень контейнерів для підвищення ефективності логістичних операцій.
     * Інтеграція: інтеграція з різними системами управління складом та логістики для створення єдиного інформаційного простору.
     * Персоналізація: налаштування параметрів відстеження та управління контейнерами у різних точках світу одночасно.
     Функціонал для користувачів системи:
     * Реєстрація та вхід в систему: можливість реєстрації нових користувачів та входу в систему для існуючих користувачів.
     * Створення та керування профілями: управління профілями користувачів, включаючи додавання, редагування та видалення.
     Адміністративна панель:
     * Управління пристроями: перегляд та керування пристроями (контейнерами) та їх параметрами.
     * Експорт та імпорт даних: можливість експорту та імпорту даних системи, а також сертифікатів.
     IoT модуль:
     * Вимірювання температури та вологості: ІоТ повинен визначати вологість та температуру у контейнері.
     Мобільний застосунок для користувачів:
     * Відстеження контейнерів: функціонал для відстеження контейнерів через мобільний додаток.

3 ПРОЄКТУВАННЯ БАЗИ ДАНИХ

     
     Для розробки бази даних було побудовано ER-діаграму бази даних (див.рис. 3.1).

 Рисунок 2 – ER-діаграма
     
      У базі даних наявні наступні зв’язки між сутностями:
      * Client - User: Зв'язок "один до одного" (1:1). Кожен клієнт пов'язаний з одним користувачем, і кожен користувач може бути пов'язаний лише з одним клієнтом. Це реалізується через зовнішній ключ user_id в таблиці Client.
      * Client - Cargo: Зв'язок "один до багатьох" (1:N). Один клієнт може мати багато вантажів, але кожен вантаж пов'язаний лише з одним клієнтом. Це реалізується через зовнішній ключ client_id в таблиці Cargo.
      * Cargo - Point: Зв'язок "один до багатьох" (1:N). Один вантаж може мати багато точок (які відстежують його переміщення), але кожна точка пов'язана лише з одним вантажем. Це реалізується через зовнішній ключ cargo_id в таблиці Point.
      * Location - Point: Зв'язок "один до багатьох" (1:N). Одне місцеположення може бути пов'язане з багатьма точками, але кожна точка пов'язана лише з одним місцеположенням. Це реалізується через зовнішній ключ location_id в таблиці Point.
     Оцінемо цю базу даних за нормальними формами. Базу даних можна оцінити на відповідність нормальним формам. Вона відповідає 1 нормальній формі (1NF), оскільки всі атрибути (стовпці таблиць) містять атомарні (неподільні) значення, а кожен запис (рядок) унікально ідентифікується первинним ключем.
     База даних відповідає 2 нормальній формі (2NF), оскільки вона вже відповідає 1NF, і всі неключові атрибути функціонально залежать від повного первинного ключа своєї таблиці. Наприклад, у таблиці Cargo атрибути client_id, identifier та info повністю залежать від первинного ключа id.
     База даних також відповідає 3 нормальній формі (3NF). Окрім відповідності 2NF, відсутні транзитивні залежності. Тобто, неключові атрибути не залежать від інших неключових атрибутів. Наприклад, у таблиці Point атрибути status і time залежать тільки від первинного ключа id, а не від cargo_id.
     Відповідність першій, другій та третій нормальним формам забезпечує цілісність даних, усуваючи аномалії при вставці, оновленні та видаленні записів. Це також сприяє логічній структурі та зв'язності даних, що полегшує їх використання та обробку.

4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
     4.1 Архітектура серверної частини
     
     
     Для того щоб краще розуміти призначення та функціональність системи була побудована діаграма прецедентів. Діаграма має 3 види акторів: звичайний користувач, представник компанії та адміністратор. Взаємодію користувачів у системі продемонстровано на діаграмі прецедентів (див. рис. 4.1).

Рисунок 4.1 – Діаграма прецедентів
       Для цього проекту була обрана гібридна архітектура, а саме гібрид між серверною та мікросервісною архітектурами. Ми обрали цю архітектуру з метою забезпечення оптимального балансу між гнучкістю, масштабованістю, та ефективністю управління ресурсами.
     Серверна частина побудована на базі Supabase, хмарної платформи, що надає функціональність бази даних PostgreSQL, а також вбудовані сервіси аутентифікації та авторизації користувачів. Це дозволяє розробникам швидко створювати та розгортати backend-частину додатків без необхідності налаштування власної інфраструктури.
     Веб-сервер, що використовує середовище виконання Node.js та фреймворк Next.js, відповідає за обробку запитів від клієнтів, виконання серверної логіки, рендеринг сторінок та взаємодію з базою даних Supabase. Next.js забезпечує високу продуктивність та зручність розробки завдяки можливості рендерингу сторінок на стороні сервера (SSR), оптимізації зображень та інших функцій.
     Для взаємодії з зовнішніми застосунками та сервісами використовується Web API, що надає стандартизований інтерфейс для доступу до даних та функціональності сервера. Це дозволяє інтегрувати систему з іншими платформами та розширювати її можливості.
      Для більш детального розуміння взаємодій технологій у системі була розроблена діаграма розгортання(див.рис.4.2).

Рисунок 4.2 – Діаграма розгортання

     
     4.2 Архітектура ІоТ частини
     
     
     Для того щоб краще розуміти призначення та як працює ІоТ була побудована діаграма прецедентів(див. рис. 4.3). Діаграма має 1 види акторів: звичайний користувач, так як єдиний хто взаємодіє з ІоТ це представник компанії і пристрій ІоТ використовується тільки ним.

Рисунок 4.3 – Діаграма прецедентів для ІоТ
     
      Діаграма описує процес роботи пристрою, який після ввімкнення підключається до мережі, вимірює температуру та вологість, відправляє ці дані на сервер, а потім може бути вимкнений.
     Так як функціонал ІоТ з самого початку був дуже специфічним та достатньо обмеженим мовою для написання коду для ІоТ було обрано С++, який дозволить нам реалізувати усе що нам потрібно не перенавантажуючи пристрій.
     Програма та пристрій отримує данні з датчики вологості та температури, після отримання даних з датчика, ESP32 встановлює з'єднання з Wi-Fi мережею з попередньо заданими параметрами. Далі, мікроконтролер формує JSON-об'єкт, який містить інформацію про температуру, вологість та поточний час, отриманий шляхом синхронізації з NTP-сервером. Сформований JSON-об'єкт відправляється на віддалений сервер за допомогою HTTP PUT-запиту, що дозволяє зберігати та аналізувати дані про мікроклімат у режимі реального часу.
     Також для більше детальної візуалізації взаємодії пристроїю з користувачем було розроблено діаграму взаємодії(див.рис. 4.4).

Рисунок 4.4 – Діаграма взаємодії

     Діаграма описує процес роботи пристрою Інтернету речей (IoT), який починається з вимкненого стану. Після ввімкнення пристрій намагається підключитися до Wi-Fi мережі. Якщо підключення успішне, пристрій вимірює температуру та вологість. Якщо вимірювання успішні, дані відправляються на сервер, після чого пристрій повертається до вимкненого стану. Якщо на будь-якому етапі виникає помилка (невдале підключення до Wi-Fi або невдалі вимірювання), пристрій також повертається до вимкненого стану.
     Також було розроблено діаграму активності, щоб ще більше детальніше зрозуміти які дії виконує пристрій та в якому порядку(див.рис.4.5).

Рисунок 4.5 – Діаграма активності

     Таким чином за допомогою діаграм ми показали як компоненти системи взаємодіють між собою та тепер маємо більше розуміння як працює програма.
     
     
     4.3 Архітектура клієнтської частини
     
     
     Для кращого розуміння функціональності клієнтської частини було розроблено діаграму прецедентів(див.рис. 4.6).

Рисунок 4.6 – Діаграма прецедентів для клієнтської частини

     За допомогою діаграми ми краще дізналися функції та призначення системи.
     Клієнтська частина веб-застосунку розробляється на базі фреймворку Next.js 14, який спрощує створення швидких та SEO-дружніх веб-додатків з використанням React. TypeScript використовується для підвищення безпеки та читабельності коду, а Tailwind CSS надає набір готових класів для швидкої стилізації елементів інтерфейсу. І для більш кращого розуміння взаємодії пакетів у системі було побудовано діаграму пакетів(див.рис.4.7).

Рисунок 4.7 – Діаграма пакетів

     Клієнтська частина відповідає за функціональність на стороні клієнта, обробляючи взаємодію з користувачем та динамічне оновлення вмісту. Серверна частина складається з API Routes, які забезпечують обмін даними з клієнтською частиною, та Supabase Auth, що відповідає за автентифікацію та авторизацію користувачів. Клієнтська частина звертається до API Routes для отримання та відправки даних, причому деякі маршрути можуть вимагати автентифікації через Supabase Auth.
     Тепер розберемо архітектуру системи, і для цього створимо діаграму компонентів(див.рис.4.8).

Рисунок 4.8 – Діаграма компонентів
     
     Клієнтська частина складається з чотирьох основних розділів: вантажі (cargos), локації (locations), пункти (points) та клієнти (clients). Кожен розділ містить сторінку (page.tsx) та відповідну таблицю для відображення даних.
     Серверну реалізовано за допомогою Next.js API, що забезпечує обробку запитів від клієнтської частини та взаємодію з базою даних Supabase. Supabase Auth відповідає за автентифікацію користувачів.
     Взаємодія між клієнтською частиною та серверною здійснюється через API-запити. Клієнтська частини отримує дані з таблиць бази даних через Next.js API, а автентифікація користувачів відбувається через Supabase Auth.
     
     
     

5 ОПИС ПРОГРАМНОЇ СИСТЕМИ
     5.1 Виклик і завантаження
     
     
     Для того щоб запустити програму, ви повинні мати на комп’ютері Node.js та Docker. Тепер ми можемо завантажити архів з програмою, розпакувати його та відкрити папку за допомогою VS Code, після чого відкрити термінал та прописати npm install, після процесу завантаження можна буде прописати npm run dev. Також важливо відмітити, що для повноцінної роботи резервних копій потрібно запустити Docker Desktop.
     Для запуску серверної частини програмної системи потрібно перейти за таким шляхом на Github:” apzkr-pzpi-21-8-karpov-denys/apzkr-pzpi-21-8-karpov-denys/Task1-Server/” потім запустити команду “npm install”, а потім “npm run dev”.
     Для запуску клієнтської частини програмної системи потрібно перейти за таким шляхом на Github:” apzkr-pzpi-21-8-karpov-denys/apzkr-pzpi-21-8-karpov-denys/Task3-WebClient/” потім запустити команду “npm install”, а потім “npm run dev”.
     Для запуску ІоТ частини програмної системи потрібно перейти за таким шляхом на Github:” apzkr-pzpi-21-8-karpov-denys/apzkr-pzpi-21-8-karpov-denys/Task2-IoT/” взяти усі файли після чого на сайті Wokwi відкрити архів та запустити програму.
     
     
     5.2 Призначення і логічна структура
     
     
     Наша система може виконувати такі види функцій:
     * відстежуванням контейнерів;
     * реєстрація та авторизація;
     * можливості компанії;
     * адміністрування.
     Відстеження контейнерів являє собою інтерфейс для введення номеру контейнеру будь-яким видом користувача, користувач може побачити у яких точках так коли був контейнер, а також продивитися яку дистанцію відповідний контейнер подолав.
     Реєстрація та авторизація використовується для реєстрації та авторизація представників компанії. Представник компанії може зареєструватися за допомого пошти та паролю, після натискання на кнопку реєстрацію користувачу на пошту надійде лист для підтвердження, після чого він може користуватися системою. Для того щоб представнику компанії увійти у систему йому потрібно ввести пошту та пароль, після чого натиснути кнопку для авторизації.
     Можливості компанії являють собою редагування таблиця які доступні для компанії, а саме точки, локації, грузи та клієнти, вони можуть редагувати, видаляти та додавати будь-яку інформацію до цих таблиць
     Адміністрування являє собою такі ж самі функції як і у звичайного представника компанії, але адміністратор має додатково доступ до завантаження резервних копій.
     
     
     5.3 Опис програмної реалізації
     
     
     Коли ми тільки заходимо на сайт бачимо таку сторінку як на рисунку 5.1.

Рисунок 5.1 – Початкова сторінка

     На цій сторінці користувач може ввести номер контейнера та подивитися який шлях він пройшов(див.рис.5.2).
Рисунок 5.2 – Результати виконання

     Тепер перейдемо на сторінку для реєстрації(див.рис.5.3).

Рисунок 5.3 – Вигляд сторінки з реєстрацією
     Введемо дані для реєстрації(див.рис.5.4).

Рисунок 5.4 – Сторінка з введеними даними 

     Після підтвердження через пошту нас переносить на сторінку де ми вже в аккаунті(див.рис.5.5).

Рисунок 5.5 – Вигляд сторінки після входи в аккаунт

     Тепер ми маємо доступ до усіх функцій, спробуємо додати нового клієнта(див.рис. 5.6).

Рисунок 5.6 – Додавання нового клієнта

     Натискаємо кнопку додати та бачимо результат(див.рис.5.7).

Рисунок 5.7 – Результат додання нового користувача

     Тепер давайте відредагуємо та змінимо адресу(див.рис.5.8).

Рисунок 5.8 – Таблиця зі зміненою адресою

     Натиснемо на кнопку відредагувати та бачимо результат(див.рис.5.9).

Рисунок 5.9 – Результат редагування адреси

     Тепер видалимо цього клієнта натиснувши на кнопку видалити(див.рис.5.10).

Рисунок 5.10 – Результат видалення

     Перейдемо на сторінку адмін, і бачимо таке вікно як на рисунку 5.11.

Рисунок 5.11 – Вікно для резервних копій

     Натиснемо кнопку та бачимо що завантажився файл з розширенням sql, цей файл у випадку втрати інформації можна буде використати щоб не втратити дані(див.рис.5.12.).

Рисунок 5.12 – Завантажені резервні копії



ВИСНОВКИ


     За результати виконання курсової роботи ми отримали програмну систему для відстежування та управління контейнерами. Під час роботою над курсової нами було проаналізовано предметну область, визначено вимоги користувачів, описано функціонал, а також розроблено концепт архітектури програмної системи. Після чого було розроблено базу даних і з нею серверну частину програмної системи, після чого було розроблено ІоТ, яка визначало температуру та вологість у контейнерах, ІоТ було написано на мові С++ з допомогою Wokwi емулятору, і нарешті було розроблено клієнтську частину програмної системи в якій ми до функціоналу додали адміністрування та резервні копії для більшої безпеки даних користувачів програмною системи для відстеження та управління контейнерами.
     Розроблена програмна система відповідає вимогам користувачів повністю, вона має чітке та ефективне управління, безпеку даних користувачів та багато іншого.


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


     1. The future of container terminals. Rodrigues, V. S., & Notteboom, T. E. 2019;
     2. Container terminal automation: Literature review and future research directions. Computers & Industrial Engineering. Zhang, R., & Van Belle, J. 2019;
     3. Supabase Documentation. URL: https://supabase.com/docs (дата звернення 23.06.2024);
     4. Node.js Documentation. URL: https://nodejs.org/docs/latest/api/ (дата звернення 23.06.2024);
     5. Wokwi Documentation. URL: https://docs.wokwi.com (дата звернення 23.06.2024).
     
 